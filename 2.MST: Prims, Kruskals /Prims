import java.util.Arrays;
public class PrimsAlgorithm {
    public static void primMST(int[][] graph) {
        int V = graph.length; // Number of vertices 
        int[] parent = new int[V]; // Array to store the resulting MST 
        int[] key = new int[V]; // Minimum weights to pick minimum weight edge 
        boolean[] mstSet = new boolean[V]; // To track vertices included in MST 
        // Initialize all keys as INFINITE and mstSet[] as false 
        Arrays.fill(key, Integer.MAX_VALUE);
        Arrays.fill(mstSet, false);
        // Start with the first vertex 
        key[0] = 0; // Weight of the first vertex is 0 so that it gets picked first 
        parent[0] = -1; // First node is the root of MST 
        // The MST will have V vertices 
        for (int count = 0; count < V - 1; count++) {
            // Pick the minimum key vertex not yet included in MST 
            int u = minKey(key, mstSet, V);
            // Include the picked vertex in the MST 
            mstSet[u] = true;
            // Update the key value and parent index of the adjacent vertices of the picked vertex 
            for (int v = 0; v < V; v++) {
                // Update key only if graph[u][v] is smaller than key[v], and v is not in mstSet 
                if (graph[u][v] != 0 && !mstSet[v] && graph[u][v] < key[v]) {
                    parent[v] = u;
                    key[v] = graph[u][v];
                }
            }
        }
        // Print the constructed MST 
        printMST(parent, graph);
    }
    // A utility function to find the vertex with the minimum key value 
    private static int minKey(int[] key, boolean[] mstSet, int V) {
        int min = Integer.MAX_VALUE, minIndex = -1;
        for (int v = 0; v < V; v++) {
            if (!mstSet[v] && key[v] < min) {
                min = key[v];
                minIndex = v;
            }
        }
        return minIndex;
        private static void printMST(int[] parent, int[][] graph) {
            System.out.println("Edge \tWeight");
            for (int i = 1; i < graph.length; i++) {
                System.out.println(parent[i] + " - " + i + "\t" + graph[i][parent[i]]);
            }
        }

        // Driver code 
        public static void main(String[] args) {
            // Example graph represented as an adjacency matrix 
            int[][] graph = {
                {
                    0,
                    2,
                    0,
                    6,
                    0
                },
                {
                    2,
                    0,
                    3,
                    8,
                    5
                },
                {
                    0,
                    3,
                    0,
                    0,
                    7
                },
                {
                    6,
                    8,
                    0,
                    0,
                    9
                },
                {
                    0,
                    5,
                    7,
                    9,
                    0
                }
            };

            primMST(graph);
        }
    }
}
