import java.util.Arrays;
public class DijkstraAlgorithm {
    // Function to find the vertex with the minimum distance value 
    static int findMinDistance(int[] dist, boolean[] visited, int vertices) {
        int min = Integer.MAX_VALUE, minIndex = -1;
        for (int v = 0; v < vertices; v++) {
            if (!visited[v] && dist[v] < min) {
                min = dist[v];
                minIndex = v;
            }
        }
        return minIndex;
    }
    // Dijkstra's algorithm implementation 
    static void dijkstra(int[][] graph, int source) {
        int vertices = graph.length;
        int[] dist = new int[vertices]; // Holds the shortest distances from the source 
        boolean[] visited = new boolean[vertices]; // Tracks visited nodes 
        // Initialize distances with infinity and set all vertices as unvisited 
        Arrays.fill(dist, Integer.MAX_VALUE);
        dist[source] = 0; // Distance from source to itself is always 0 
        // Loop to process each vertex 
        for (int i = 0; i < vertices - 1; i++) {
            // Pick the vertex with the minimum distance 
            int u = findMinDistance(dist, visited, vertices);
            visited[u] = true;
            // Update distance values of adjacent vertices of the chosen vertex 
            for (int v = 0; v < vertices; v++) {
                if (!visited[v] && graph[u][v] != 0 && dist[u] != Integer.MAX_VALUE &&
                    dist[u] + graph[u][v] < dist[v]) {
                    dist[v] = dist[u] + graph[u][v];
                }
            }
            // Print the result 
            printSolution(dist);
        }
        // Function to print the solution 
        static void printSolution(int[] dist) {
            System.out.println("Vertex \t Distance from Source");
            for (int i = 0; i < dist.length; i++) {
                System.out.println(i + " \t " + dist[i]);
            }
        }
        public static void main(String[] args) {
            // Example graph represented as an adjacency matrix 
            int[][] graph = {
                {
                    0,
                    7,
                    9,
                    0,
                    0,
                    14
                },
                {
                    7,
                    0,
                    10,
                    15,
                    0,
                    0
                },
                {
                    9,
                    10,
                    0,
                    11,
                    0,
                    2
                },
                {
                    0,
                    15,
                    11,
                    0,
                    6,
                    0
                },
                {
                    0,
                    0,
                    0,
                    6,
                    0,
                    9
                },
                {
                    14,
                    0,
                    2,
                    0,
                    9,
                    0
                },
            };
            int source = 0; // Source vertex 
            dijkstra(graph, source);
        }
    }
